//=============================================================================
// Luna_ChatterMV.js
//=============================================================================
//=============================================================================
// Build Date: 2020-09-12 19:34:01
//=============================================================================
//=============================================================================
// Made with LunaTea -- Haxe
//=============================================================================


// Generated by Haxe 4.1.3
/*:
@author LunaTechs - Kino
@plugindesc This plugin allows you to create notifications and event labels within RPGMakerMV/MZ <LunaChatter>.

@target MV MZ

@param audioBytes
@desc The audio files to use when playing sound
@type struct<SoundFile>[]

@param fadeInTime
@text Fade In Time
@desc The time in frames to fade in the chatter window as it enters the screen.
@default 120

@param fadeOutTime
@text Fade Out Time
@desc The time in frames to fade out the chatter window as it leaves the screen.
@default 120

@param eventWindowRange
@text Event Window Range
@desc The radius in pixels in which the player will see the chatter window.
@default 120

@param anchorPosition
@text Anchor Position
@desc The anchor position of the chatter notification windows on the screen.
@default right


@help
This plugin allows you to have a press start button before the title screen information.

MIT License
Copyright (c) 2020 LunaTechsDev
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
*/

/*~struct~Template:
*
* @param id
* @text Identifier
* @desc The identifier used for this template
* @default default
*
*/

/*~struct~SoundFile:
* @param id
* @text Identifier
* @desc The identifier used in the text window
* @type text
*
* @param name
* @text Name
* @desc The name of the audio SE file
* @type file
*
* @param pitch
* @text Pitch
* @desc The pitch of the audio file
* @type number
* @default 100
*
* @param volume
* @text Volume
* @desc The volume of the audio file
* @type number
* @default 50
*
* @param pan
* @text Pan
* @desc The pan of the audio file
* @type number
* @default 100
*
*/
(function ($hx_exports, $global) { "use strict"
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {};
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""))
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0
		}
		this.r.m = this.r.exec(s)
		this.r.s = s
		return this.r.m != null;
	}
}
EReg.__name__ = true
class Lambda {
	static iter(it,f) {
		let x = $getIterator(it)
		while(x.hasNext()) f(x.next())
	}
}
Lambda.__name__ = true
class _$LTGlobals_$ {
}
_$LTGlobals_$.__name__ = true
class LunaChatter {
	static main() {
		
//=============================================================================
// Parameter Setup
//=============================================================================
      
		let string = LunaChatter.params["fadeInTime"]
		LunaChatter.fadeInTime = parseInt(string,10)
		let string1 = LunaChatter.params["fadeOutTime"]
		LunaChatter.fadeOutTime = parseInt(string1,10)
		let string2 = LunaChatter.params["eventWindowRange"]
		LunaChatter.eventWindowRange = parseInt(string2,10)
		LunaChatter.anchorPosition = LunaChatter.params["anchorPosition"].trim()
		
//=============================================================================
// Event Hooks
//=============================================================================
      
		LunaChatter.setupEvents()
		
//=============================================================================
// Scene_Map
//=============================================================================
      
		let _SceneMapStart = Scene_Map.prototype.start
		Scene_Map.prototype.start = function() {
			_SceneMapStart.call(this)
		}
		let _SceneMapCreateWindows = Scene_Map.prototype.createAllWindows
		Scene_Map.prototype.createAllWindows = function() {
			_SceneMapCreateWindows.call(this)
			LunaChatter.createAllEventWindows(this)
		}
	}
	static setupEvents() {
		LunaChatter.ChatterEmitter.on("queue",function(win) {
			LunaChatter.queueChatterWindow(win)
		})
		LunaChatter.ChatterEmitter.on("dequeue",function() {
			LunaChatter.dequeueChatterWindow()
		})
	}
	static createAllEventWindows(scene) {
		Lambda.iter($gameMap.events(),function(event) {
			let chatterEventWindow = new ChatterEventWindow(0,0,100,100)
			chatterEventWindow.setEvent(event)
			Lambda.iter(scene._spriteset._characterSprites,function(charSprite) {
				if(charSprite.x == event.screenX() && charSprite.y == event.screenY()) {
					chatterEventWindow.setEventSprite(charSprite)
					charSprite.addChild(chatterEventWindow)
					charSprite.bitmap.addLoadListener(function(_) {
						LunaChatter.positionEventWindow(chatterEventWindow)
					})
					chatterEventWindow.close()
				}
			})
			chatterEventWindow.setupEvents(LunaChatter.setupGameEvtEvents)
			chatterEventWindow.open()
		})
	}
	static setupGameEvtEvents(currentWindow) {
		currentWindow.on("playerInRange",function(win) {
			if(win.playerInRange == false) {
				LunaChatter.openChatterWindow(win)
				win.playerInRange = true
			}
		})
		currentWindow.on("playerOutOfRange",function(win) {
			if(win.playerInRange == true) {
				LunaChatter.closeChatterWindow(win)
				win.playerInRange = false
			}
		})
		currentWindow.on("onHover",function(win) {
			if(win.hovered == false && win.playerInRange == false) {
				LunaChatter.openChatterWindow(win)
				win.hovered = true
			}
		})
		currentWindow.on("onHoverOut",function(win) {
			if(win.hovered == true) {
				LunaChatter.closeChatterWindow(win)
				win.hovered = false
			}
		})
	}
	static queueChatterWindow(win) {
		ChatterExtensions.enqueue(LunaChatter.chatterQueue,win)
	}
	static dequeueChatterWindow() {
		return ChatterExtensions.dequeue(LunaChatter.chatterQueue);
	}
	static openChatterWindow(win) {
		win.open()
	}
	static positionEventWindow(win) {
		let offset = ChatterExtensions.offsetByEventSprite(win.eventSprite)
		win.x -= win.width / 2
		win.y -= win.height + offset.y
	}
	static closeChatterWindow(win) {
		win.close()
	}
}
LunaChatter.__name__ = true
class ChatterExtensions {
	static enqueue(arr,element) {
		arr.push(element)
	}
	static dequeue(arr) {
		return arr.shift();
	}
	static offsetByEventSprite(charSprite) {
		charSprite.updateFrame()
		return { x : charSprite._frame.width / 2, y : charSprite._frame.height};
	}
}
ChatterExtensions.__name__ = true
class ChatterWindow extends Window_Base {
	constructor(x,y,width,height) {
		super(x,y,width,height)
	}
	setupEvents(fn) {
		fn(this)
	}
	show() {
		this.emit("show",this)
		super.show()
	}
	hide() {
		this.emit("hide",this)
		super.hide()
	}
	open() {
		this.emit("open",this)
		super.open()
	}
	close() {
		this.emit("close",this)
		super.close()
	}
}
ChatterWindow.__name__ = true
class ChatterEventWindow extends ChatterWindow {
	constructor(x,y,width,height) {
		super(x,y,width,height)
		this.hovered = false
		this.playerInRange = false
	}
	setEvent(evt) {
		this.event = evt
	}
	setEventSprite(evt) {
		this.eventSprite = evt
	}
	update() {
		super.update()
		this.scanForPlayer()
		this.scanForHover()
	}
	scanForPlayer() {
		let eventX = this.event.screenX()
		let eventY = this.event.screenY()
		let playerX = $gamePlayer.screenX()
		let playerY = $gamePlayer.screenY()
		if(Math.sqrt(Math.pow(playerX - eventX,2) + Math.pow(playerY - eventY,2)) < LunaChatter.eventWindowRange) {
			this.emit("playerInRange",this)
		} else {
			this.emit("playerOutOfRange",this)
		}
	}
	scanForHover() {
		let eventScreenX = this.event.screenX()
		let eventScreenY = this.event.screenY()
		let inputPosition_x = TouchInput.x
		let inputPosition_y = TouchInput.y
		if(inputPosition_x >= eventScreenX && inputPosition_x <= eventScreenX + 48 && (inputPosition_y >= eventScreenY - 48 && inputPosition_y <= eventScreenY)) {
			this.emit("onHover",this)
		} else {
			this.emit("onHoverOut",this)
		}
	}
}
ChatterEventWindow.__name__ = true
Math.__name__ = true
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0
		this.array = array
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true
class js_Boot {
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o)
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object"
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__]
				let n = e.__constructs__[o._hx_index]
				let con = e[n]
				if(con.__params__) {
					s = s + "\t"
					return n + "(" + ((function($this) {
						var $r
						let _g = []
						{
							let _g1 = 0
							let _g2 = con.__params__
							while(true) {
								if(!(_g1 < _g2.length)) {
									break
								}
								let p = _g2[_g1]
								_g1 = _g1 + 1
								_g.push(js_Boot.__string_rec(o[p],s))
							}
						}
						$r = _g
						return $r;
					}(this))).join(",") + ")"
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "["
				s += "\t";
				let _g = 0
				let _g1 = o.length
				while(_g < _g1) {
					let i = _g++
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr
			try {
				tostr = o.toString
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString()
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n"
			s += "\t";
			let hasp = o.hasOwnProperty != null
			let k = null
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1)
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
}
js_Boot.__name__ = true
class utils_Fn {
	static proto(obj) {
		return obj.prototype;
	}
	static updateProto(obj,fn) {
		return (fn)(obj.prototype);
	}
	static updateEntity(obj,fn) {
		return (fn)(obj);
	}
}
utils_Fn.__name__ = true
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
String.__name__ = true
Array.__name__ = true
js_Boot.__toStr = ({ }).toString
LunaChatter.ChatterEmitter = new PIXI.utils.EventEmitter()
LunaChatter.fadeInTime = 0
LunaChatter.fadeOutTime = 0
LunaChatter.eventWindowRange = 0
LunaChatter.anchorPosition = "bottomRight"
LunaChatter.params = (function($this) {
	var $r
	let _this = $plugins
	let _g = []
	{
		let _g1 = 0
		while(_g1 < _this.length) {
			let v = _this[_g1]
			++_g1
			if(new EReg("<LunaChatter>","ig").match(v.description)) {
				_g.push(v)
			}
		}
	}
	$r = _g[0].parameters
	return $r;
}(this))
LunaChatter.chatterQueue = []
LunaChatter.main()
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, {})
